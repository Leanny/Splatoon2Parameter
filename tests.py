import unittest
import param_calc

class TestParameterCalculator(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.aps = sorted([mains*10 + subs*3 for mains in range(4) for subs in range(10)])
        
        cls.ps = [param_calc.calcSkillPoint2Percent(ap)/100.0 for ap in cls.aps]
        
        cls.abilities = {
            'MainInkSave - ConsumeRt_Main_Low': [0.6, 0.8, 1.0],
            'MainInkSave - ConsumeRt_Main': [0.55, 0.775, 1.0],
            'MainInkSave - ConsumeRt_Main_High': [0.5, 0.7, 1.0],
            'SubInkSaver - ConsumeRt_Sub_Low': [0.8, 0.9, 1.0],
            'SubInkSaver - ConsumeRt_Sub': [0.7, 0.85, 1.0],
            'SubInkSaver - ConsumeRt_Sub_High': [0.65, 0.825, 1.0],
            'SquidMoveUp - MoveVel_Stealth_BigWeapon': [2.4, 2.064, 1.728],
            'SquidMoveUp - MoveVel_Stealth': [2.4, 2.16, 1.92],
            'SquidMoveUp - MoveVel_Stealth_ShortWeapon': [2.4, 2.208, 2.016],
            'RunSpeedUp - MoveVel_Human_BigWeapon': [1.44, 1.16, 0.88],
            'RunSpeedUp - MoveVel_Human': [1.44, 1.2, 0.96],
            'RunSpeedUp - MoveVel_Human_ShortWeapon': [1.44, 1.24, 1.04],
            'RunSpeedUp - MoveVelRt_Human_Shot': [1.25, 1.125, 1.0],
            'RunSpeedUp - MoveVelRt_Human_ShotG': [1.3, 1.15, 1.0],
            'SpecialIncreaseUp - SpecialRt_Charge': [1.3, 1.15, 1.0],
            'RespawnTimeSave - Dying_AroudFrm': [30.0, 60.0, 90.0],
            'RespawnTimeSave - Dying_ChaseFrm': [90.0, 180.0, 270.0],
            'RespawnSpecialGaugeSave - SpecialRt_Restart': [1.0, 0.8, 0.5],
            'RespawnSpecialGaugeSave - SpecialRt_Restart_SuperLanding': [1.25, 1.05, 0.75],
            'OpInkEffectReduction - OpInk_JumpGnd_Msn': [1.05, 0.825, 0.6],
            'OpInkEffectReduction - OpInk_JumpGnd': [1.05, 0.925, 0.8],
            'OpInkEffectReduction - OpInk_VelGnd_ShotK': [1.0, 0.75, 0.5],
            'OpInkEffectReduction - OpInk_VelGnd_Shot': [0.4, 0.26, 0.12],
            'OpInkEffectReduction - OpInk_VelGnd': [0.72, 0.48, 0.24],
            'OpInkEffectReduction - OpInk_Damage_Lmt': [0.2, 0.3, 0.4],
            'OpInkEffectReduction - OpInk_Damage': [0.0015, 0.00225, 0.003],
            'MarkingTimeReduction - MarkingTime_ShortRt_Thermal': [1.0, 1.0, 1.0],
            'MarkingTimeReduction - Silhouette_DistFar': [290.0, 230.0, 170.0],
            'MarkingTimeReduction - Silhouette_DistNear': [250.0, 190.0, 130.0],
            'MarkingTimeReduction - MarkingTime_ShortRt_Trap': [0.1, 0.55, 1.0],
            'MarkingTimeReduction - MarkingTime_ShortRt': [0.1, 0.55, 1.0],
            'JumpTimeSave - DokanWarp_TameFrm': [20.0, 35.0, 80.0],
            'JumpTimeSave - DokanWarp_MoveFrm': [96.6, 132.3, 138.0],
            'InkRecoveryUp - RecoverFullFrm_Ink': [117.0, 148.5, 180.0],
            'InkRecoveryUp - RecoverNrmlFrm_Ink': [220.0, 410.0, 600.0],
            'BombDistanceUp - BombThrow_VelZ': [16.8, 14.0, 11.2],
            'BombDistanceUp - BombThrow_VelZ_BombPiyo': [18.4, 16.0, 13.6],
            'BombDistanceUp - BombThrow_VelZ_PointSensor': [18.4, 16.0, 13.6],
            'BombDamageReduction - BurstDamageRt_SubH': [0.5, 0.75, 1.0],
            'BombDamageReduction - BurstDamageRt_SubL': [0.6, 0.8, 1.0],
            'BombDamageReduction - BurstDamageRt_Special': [0.65, 0.825, 1.0],
            'BombDamageReduction - BurstDamageRt_Main': [1.0, 1.0, 1.0],
        }
        
        
    def assertListAlmostEqual(self, a, b, places=6, msg=None, delta=None):
        len_a = len(a)
        self.assertEqual(len_a, len(b))
        
        for i in range(len_a):
            self.assertAlmostEqual(a[i],b[i], places, msg, delta)        
        
    def test_calcSkillPoint2Percent(self):        
        expected = [0.0,0.09657,0.18828,0.27513,0.303,0.35712,0.38337,0.43425,0.45888,0.50652,0.52953,0.552,0.57393,0.59532,0.61617,0.63648,0.65625,0.67548,0.69417,0.71232,0.72993,0.747,0.76353,0.77952,0.79497,0.80988,0.82425,0.83808,0.85137,0.86412,0.87633,0.89913,0.90972,0.92928,0.93825,0.95457,0.96192,0.98073,0.99468,1.0,]
        
        self.assertListAlmostEqual(self.ps, expected)
        
    def test_lerpN_06(self):
        expected = [0.0,0.1785927,0.2921162,0.3863303,0.4148022,0.4682086,0.4933338,0.5407876,0.5632276,0.6057562,0.6259171,0.6453837,0.6641823,0.6823369,0.6998687,0.7167969,0.7331391,0.7489111,0.7641274,0.7788013,0.7929448,0.8065692,0.8196848,0.832301,0.8444266,0.8560698,0.8672381,0.8779384,0.8881772,0.8979606,0.907294,0.9246317,0.9326451,0.947382,0.9541128,0.9663157,0.9717935,0.9857624,0.9960766,1.0,]
        
        s=0.6        
        
        results = [param_calc.lerpN(s,p) for p in self.ps]
        
        self.assertListAlmostEqual(results, expected)
        
    def test_lerpN_04(self):
        expected = [0.0,0.0455024,0.1099875,0.1815973,0.2063025,0.2563613,0.2815614,0.3319847,0.3571006,0.4069096,0.4315222,0.455892,0.4799863,0.5037747,0.5272289,0.5503229,0.5730319,0.595333,0.6172047,0.6386268,0.6595802,0.680047,0.7000105,0.7194546,0.7383646,0.7567261,0.774526,0.7917515,0.808391,0.8244332,0.8398675,0.8688737,0.8824274,0.907595,0.9191939,0.9403886,0.9499722,0.9746058,0.9929734,1.0,]
        
        s=0.4        
        
        results = [param_calc.lerpN(s,p) for p in self.ps]
        
        self.assertListAlmostEqual(results, expected)
        
    def test_lerpN_075(self):
        expected = [0.0,0.3790281,0.5000536,0.5853117,0.6092271,0.6522305,0.6717163,0.7073729,0.7237565,0.7540437,0.7680761,0.7814389,0.7941772,0.8063303,0.8179332,0.8290168,0.8396087,0.8497336,0.8594139,0.8686697,0.8775191,0.8859787,0.8940637,0.9017876,0.9091631,0.9162018,0.9229142,0.92931,0.9353981,0.9411869,0.9466838,0.9568296,0.9614909,0.9700177,0.9738928,0.9808881,0.9840157,0.9919567,0.9977886,1.0,]
        
        s=0.75        
        
        results = [param_calc.lerpN(s,p) for p in self.ps]
        
        self.assertListAlmostEqual(results, expected)
        
    def test_lerpN_01377(self):
        expected = [0.0,0.0012481,0.0084266,0.0249376,0.0328639,0.052586,0.0644142,0.0920007,0.1077269,0.1428987,0.162262,0.1827438,0.2042867,0.2268278,0.2502993,0.2746288,0.2997403,0.3255545,0.3519889,0.3789588,0.4063775,0.4341565,0.4622063,0.4904365,0.5187562,0.5470746,0.5753009,0.6033451,0.631118,0.6585314,0.6854987,0.7377579,0.7628861,0.8107492,0.8333358,0.8754719,0.8948921,0.9458627,0.9848579,1.0,]
        
        s=0.1377        
        
        results = [param_calc.lerpN(s,p) for p in self.ps]
        
        self.assertListAlmostEqual(results, expected)
        
    def test_slope(self):
        expected = [0.0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.1376812,0.75,0.5,0.6,0.5,0.5,0.0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.6,0.6,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,]
        
        names = sorted([*self.abilities.keys()])        
        results = [param_calc.get_slope_simple(self.abilities[name]) for name in names]
        
        self.assertListAlmostEqual(results, expected)

    def test_effect(self):
        
        expected = [[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,],[1.0,0.96619,0.934095,0.903715,0.89395,0.875015,0.86581,0.84803,0.839385,0.822725,0.814675,0.8068,0.799135,0.791645,0.78433,0.777225,0.77033,0.763575,0.75703,0.750695,0.744535,0.73855,0.732775,0.727175,0.72175,0.716535,0.71153,0.706665,0.70201,0.697565,0.693295,0.685315,0.681605,0.674745,0.671595,0.66589,0.663335,0.656755,0.651855,0.65,],[1.0,0.9517,0.90585,0.86245,0.8485,0.82145,0.8083,0.7829,0.77055,0.74675,0.73525,0.724,0.71305,0.70235,0.6919,0.68175,0.6719,0.66225,0.6529,0.64385,0.63505,0.6265,0.61825,0.61025,0.6025,0.59505,0.5879,0.58095,0.5743,0.56795,0.56185,0.55045,0.54515,0.53535,0.53085,0.5227,0.51905,0.50965,0.50265,0.5,],[1.0,0.96136,0.92468,0.88996,0.8788,0.85716,0.84664,0.82632,0.81644,0.7974,0.7882,0.7792,0.77044,0.76188,0.75352,0.7454,0.73752,0.7298,0.72232,0.71508,0.70804,0.7012,0.6946,0.6882,0.682,0.67604,0.67032,0.66476,0.65944,0.65436,0.64948,0.64036,0.63612,0.62828,0.62468,0.61816,0.61524,0.60772,0.60212,0.6,],[11.2,11.74096,12.25448,12.74056,12.8968,13.19976,13.34704,13.63152,13.76984,14.0364,14.1652,14.2912,14.41384,14.53368,14.65072,14.7644,14.87472,14.9828,15.08752,15.18888,15.28744,15.3832,15.4756,15.5652,15.652,15.73544,15.81552,15.89336,15.96784,16.03896,16.10728,16.23496,16.29432,16.40408,16.45448,16.54576,16.58664,16.69192,16.77032,16.8,],[13.6,14.06368,14.50384,14.92048,15.0544,15.31408,15.44032,15.68416,15.80272,16.0312,16.1416,16.2496,16.35472,16.45744,16.55776,16.6552,16.74976,16.8424,16.93216,17.01904,17.10352,17.1856,17.2648,17.3416,17.416,17.48752,17.55616,17.62288,17.68672,17.74768,17.80624,17.91568,17.96656,18.06064,18.10384,18.18208,18.21712,18.30736,18.37456,18.4,],[13.6,14.06368,14.50384,14.92048,15.0544,15.31408,15.44032,15.68416,15.80272,16.0312,16.1416,16.2496,16.35472,16.45744,16.55776,16.6552,16.74976,16.8424,16.93216,17.01904,17.10352,17.1856,17.2648,17.3416,17.416,17.48752,17.55616,17.62288,17.68672,17.74768,17.80624,17.91568,17.96656,18.06064,18.10384,18.18208,18.21712,18.30736,18.37456,18.4,],[180.0,173.9142,168.1371,162.6687,160.911,157.5027,155.8458,152.6454,151.0893,148.0905,146.6415,145.224,143.8443,142.4961,141.1794,139.9005,138.6594,137.4435,136.2654,135.1251,134.0163,132.939,131.8995,130.8915,129.915,128.9763,128.0754,127.1997,126.3618,125.5617,124.7931,123.3567,122.6889,121.4541,120.8871,119.8602,119.4003,118.2159,117.3339,117.0,],[600.0,563.292,528.446,495.462,484.86,464.302,454.308,435.004,425.618,407.53,398.79,390.24,381.918,373.786,365.844,358.13,350.644,343.31,336.204,329.326,322.638,316.14,309.87,303.79,297.9,292.238,286.804,281.522,276.468,271.642,267.006,258.342,254.314,246.866,243.446,237.252,234.478,227.334,222.014,220.0,],[138.0,137.9482835,137.6510345,136.9679054,136.6394357,135.8232897,135.332656,134.192425,133.5395484,132.0846624,131.2834435,130.4344066,129.5437933,128.6102298,127.6361678,126.6293472,125.5934552,124.5209035,123.4258582,122.3123643,121.1779496,120.0259209,118.8668103,117.6974205,116.5211749,115.3495123,114.186674,113.0198064,111.8690828,110.7386065,109.6231313,107.459738,106.4184998,104.4329173,103.4946371,101.752207,100.9536705,98.8447122,97.2245393,96.6,],[80.0,57.2553795,49.9954622,44.8828853,43.4463713,40.8670788,39.6957111,37.5596517,36.5738269,34.75812,33.9165196,33.1136645,32.3504021,31.6208544,30.9230157,30.2583449,29.6250738,29.0153569,28.4342405,27.8804272,27.3497523,26.8412758,26.3570556,25.8933204,25.4493572,25.0273279,24.6265433,24.2408496,23.8752921,23.5293309,23.1997801,22.5910191,22.3110732,21.7984206,21.5651376,21.1459455,20.9595666,20.4833544,20.1321871,20.0,],[1.0,0.95653,0.915265,0.876205,0.86365,0.839305,0.82747,0.80461,0.793495,0.772075,0.761725,0.7516,0.741745,0.732115,0.72271,0.713575,0.70471,0.696025,0.68761,0.679465,0.671545,0.66385,0.656425,0.649225,0.64225,0.635545,0.62911,0.622855,0.61687,0.611155,0.605665,0.595405,0.590635,0.581815,0.577765,0.57043,0.567145,0.558685,0.552385,0.55,],[1.0,0.9106832,0.8539305,0.8068504,0.7925989,0.7659053,0.7533189,0.7296291,0.7183772,0.6971307,0.6870545,0.6773082,0.6679216,0.65884,0.6500531,0.6415932,0.633451,0.6255363,0.6179241,0.6106074,0.6035396,0.5967154,0.5901695,0.5838574,0.5777749,0.5719573,0.5664003,0.5610231,0.5558999,0.5510274,0.5463644,0.5376955,0.533685,0.5263015,0.5229248,0.516831,0.5141107,0.5071299,0.5019543,0.5,],[1.0,0.96136,0.92468,0.88996,0.8788,0.85716,0.84664,0.82632,0.81644,0.7974,0.7882,0.7792,0.77044,0.76188,0.75352,0.7454,0.73752,0.7298,0.72232,0.71508,0.70804,0.7012,0.6946,0.6882,0.682,0.67604,0.67032,0.66476,0.65944,0.65436,0.64948,0.64036,0.63612,0.62828,0.62468,0.61816,0.61524,0.60772,0.60212,0.6,],[1.0,0.91306,0.83053,0.75241,0.7273,0.67861,0.65494,0.60922,0.58699,0.54415,0.52345,0.5032,0.48349,0.46423,0.44542,0.42715,0.40942,0.39205,0.37522,0.35893,0.34309,0.3277,0.31285,0.29845,0.2845,0.27109,0.25822,0.24571,0.23374,0.22231,0.21133,0.19081,0.18127,0.16363,0.15553,0.14086,0.13429,0.11737,0.10477,0.1,],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,],[1.0,0.91306,0.83053,0.75241,0.7273,0.67861,0.65494,0.60922,0.58699,0.54415,0.52345,0.5032,0.48349,0.46423,0.44542,0.42715,0.40942,0.39205,0.37522,0.35893,0.34309,0.3277,0.31285,0.29845,0.2845,0.27109,0.25822,0.24571,0.23374,0.22231,0.21133,0.19081,0.18127,0.16363,0.15553,0.14086,0.13429,0.11737,0.10477,0.1,],[170.0,181.592,192.596,203.012,206.36,212.852,216.008,222.104,225.068,230.78,233.54,236.24,238.868,241.436,243.944,246.38,248.744,251.06,253.304,255.476,257.588,259.64,261.62,263.54,265.4,267.188,268.904,270.572,272.168,273.692,275.156,277.892,279.164,281.516,282.596,284.552,285.428,287.684,289.364,290.0,],[130.0,141.592,152.596,163.012,166.36,172.852,176.008,182.104,185.068,190.78,193.54,196.24,198.868,201.436,203.944,206.38,208.744,211.06,213.304,215.476,217.588,219.64,221.62,223.54,225.4,227.188,228.904,230.572,232.168,233.692,235.156,237.892,239.164,241.516,242.596,244.552,245.428,247.684,249.364,250.0,],[0.003,0.0028551,0.0027176,0.0025873,0.0025455,0.0024644,0.0024249,0.0023487,0.0023117,0.0022403,0.0022058,0.002172,0.0021392,0.0021071,0.0020757,0.0020453,0.0020157,0.0019867,0.0019587,0.0019315,0.0019051,0.0018795,0.0018548,0.0018308,0.0018075,0.0017852,0.0017637,0.0017428,0.0017229,0.0017039,0.0016856,0.0016513,0.0016355,0.001606,0.0015926,0.0015681,0.0015571,0.001529,0.001508,0.0015,],[0.4,0.38068,0.36234,0.34498,0.3394,0.32858,0.32332,0.31316,0.30822,0.2987,0.2941,0.2896,0.28522,0.28094,0.27676,0.2727,0.26876,0.2649,0.26116,0.25754,0.25402,0.2506,0.2473,0.2441,0.241,0.23802,0.23516,0.23238,0.22972,0.22718,0.22474,0.22018,0.21806,0.21414,0.21234,0.20908,0.20762,0.20386,0.20106,0.2,],[0.8,0.82415,0.847075,0.868775,0.87575,0.889275,0.89585,0.90855,0.914725,0.926625,0.932375,0.938,0.943475,0.948825,0.95405,0.959125,0.96405,0.968875,0.97355,0.978075,0.982475,0.98675,0.990875,0.994875,0.99875,1.002475,1.00605,1.009525,1.01285,1.016025,1.019075,1.024775,1.027425,1.032325,1.034575,1.03865,1.040475,1.045175,1.048675,1.05,],[0.6,0.64347,0.684735,0.723795,0.73635,0.760695,0.77253,0.79539,0.806505,0.827925,0.838275,0.8484,0.858255,0.867885,0.87729,0.886425,0.89529,0.903975,0.91239,0.920535,0.928455,0.93615,0.943575,0.950775,0.95775,0.964455,0.97089,0.977145,0.98313,0.988845,0.994335,1.004595,1.009365,1.018185,1.022235,1.02957,1.032855,1.041315,1.047615,1.05,],[0.24,0.286368,0.330384,0.372048,0.38544,0.411408,0.424032,0.448416,0.460272,0.48312,0.49416,0.50496,0.515472,0.525744,0.535776,0.54552,0.554976,0.56424,0.573216,0.581904,0.590352,0.59856,0.60648,0.61416,0.6216,0.628752,0.635616,0.642288,0.648672,0.654768,0.660624,0.671568,0.676656,0.686064,0.690384,0.698208,0.701712,0.710736,0.717456,0.72,],[0.12,0.147048,0.172724,0.197028,0.20484,0.219988,0.227352,0.241576,0.248492,0.26182,0.26826,0.27456,0.280692,0.286684,0.292536,0.29822,0.303736,0.30914,0.314376,0.319444,0.324372,0.32916,0.33378,0.33826,0.3426,0.346772,0.350776,0.354668,0.358392,0.361948,0.365364,0.371748,0.374716,0.380204,0.382724,0.387288,0.389332,0.394596,0.398516,0.4,],[0.5,0.5483,0.59415,0.63755,0.6515,0.67855,0.6917,0.7171,0.72945,0.75325,0.76475,0.776,0.78695,0.79765,0.8081,0.81825,0.8281,0.83775,0.8471,0.85615,0.86495,0.8735,0.88175,0.88975,0.8975,0.90495,0.9121,0.91905,0.9257,0.93205,0.93815,0.94955,0.95485,0.96465,0.96915,0.9773,0.98095,0.99035,0.99735,1.0,],[0.5,0.5893168,0.6460695,0.6931496,0.7074011,0.7340947,0.7466811,0.7703709,0.7816228,0.8028693,0.8129455,0.8226918,0.8320784,0.84116,0.8499469,0.8584068,0.866549,0.8744637,0.8820759,0.8893926,0.8964604,0.9032846,0.9098305,0.9161426,0.9222251,0.9280427,0.9335997,0.9389769,0.9441001,0.9489726,0.9536356,0.9623045,0.966315,0.9736985,0.9770752,0.983169,0.9858893,0.9928701,0.9980457,1.0,],[0.75,0.8393168,0.8960695,0.9431496,0.9574011,0.9840947,0.9966811,1.0203709,1.0316228,1.0528693,1.0629455,1.0726918,1.0820784,1.09116,1.0999469,1.1084068,1.116549,1.1244637,1.1320759,1.1393926,1.1464604,1.1532846,1.1598305,1.1661426,1.1722251,1.1780427,1.1835997,1.1889769,1.1941001,1.1989726,1.2036356,1.2123045,1.216315,1.2236985,1.2270752,1.233169,1.2358893,1.2428701,1.2480457,1.25,],[90.0,84.204,78.702,73.494,71.82,68.574,66.996,63.948,62.466,59.61,58.23,56.88,55.566,54.282,53.028,51.81,50.628,49.47,48.348,47.262,46.206,45.18,44.19,43.23,42.3,41.406,40.548,39.714,38.916,38.154,37.422,36.054,35.418,34.242,33.702,32.724,32.286,31.158,30.318,30.0,],[270.0,252.612,236.106,220.482,215.46,205.722,200.988,191.844,187.398,178.83,174.69,170.64,166.698,162.846,159.084,155.43,151.884,148.41,145.044,141.786,138.618,135.54,132.57,129.69,126.9,124.218,121.644,119.142,116.748,114.462,112.266,108.162,106.254,102.726,101.106,98.172,96.858,93.474,90.954,90.0,],[1.0,1.02415,1.047075,1.068775,1.07575,1.089275,1.09585,1.10855,1.114725,1.126625,1.132375,1.138,1.143475,1.148825,1.15405,1.159125,1.16405,1.168875,1.17355,1.178075,1.182475,1.18675,1.190875,1.194875,1.19875,1.202475,1.20605,1.209525,1.21285,1.216025,1.219075,1.224775,1.227425,1.232325,1.234575,1.23865,1.240475,1.245175,1.248675,1.25,],[1.0,1.02898,1.05649,1.08253,1.0909,1.10713,1.11502,1.13026,1.13767,1.15195,1.15885,1.1656,1.17217,1.17859,1.18486,1.19095,1.19686,1.20265,1.20826,1.21369,1.21897,1.2241,1.22905,1.23385,1.2385,1.24297,1.24726,1.25143,1.25542,1.25923,1.26289,1.26973,1.27291,1.27879,1.28149,1.28638,1.28857,1.29421,1.29841,1.3,],[0.96,1.006368,1.050384,1.092048,1.10544,1.131408,1.144032,1.168416,1.180272,1.20312,1.21416,1.22496,1.235472,1.245744,1.255776,1.26552,1.274976,1.28424,1.293216,1.301904,1.310352,1.31856
,1.32648,1.33416,1.3416,1.348752,1.355616,1.362288,1.368672,1.374768,1.380624,1.391568,1.396656,1.406064,1.410384,1.418208,1.421712,1.430736,1.437456,1.44,],[0.88,0.934096,0.985448,1.034056,1.04968,1.079976,1.094704,1.123152,1.136984,1.16364,1.17652,1.18912,1.201384,1.213368,1.225072,1.23644,1.247472,1.25828,1.268752,1.278888,1.288744,1.29832,1.30756,1.31652,1.3252,1.333544,1.341552,1.349336,1.356784,1.363896,1.370728,1.383496,1.389432,1.400408,1.405448,1.414576,1.418664,1.429192,1.437032,1.44,],[1.04,1.07864,1.11532,1.15004,1.1612,1.18284,1.19336,1.21368,1.22356,1.2426,1.2518,1.2608,1.26956,1.27812,1.28648,1.2946,1.30248,1.3102,1.31768,1.32492,1.33196,1.3388,1.3454,1.3518,1.358,1.36396,1.36968,1.37524,1.38056,1.38564,1.39052,1.39964,1.40388,1.41172,1.41532,1.42184,1.42476,1.43228,1.43788,1.44,],[1.0,1.02898,1.05649,1.08253,1.0909,1.10713,1.11502,1.13026,1.13767,1.15195,1.15885,1.1656,1.17217,1.17859,1.18486,1.19095,1.19686,1.20265,1.20826,1.21369,1.21897,1.2241,1.22905,1.23385,1.2385,1.24297,1.24726,1.25143,1.25542,1.25923,1.26289,1.26973,1.27291,1.27879,1.28149,1.28638,1.28857,1.29421,1.29841,1.3,],[1.92,1.966368,2.010384,2.052048,2.06544,2.091408,2.104032,2.128416,2.140272,2.16312,2.17416,2.18496,2.195472,2.205744,2.215776,2.22552,2.234976,2.24424,2.253216,2.261904,2.270352,2.27856,2.28648,2.29416,2.3016,2.308752,2.315616,2.322288,2.328672,2.334768,2.340624,2.351568,2.356656,2.366064,2.370384,2.378208,2.381712,2.390736,2.397456,2.4,],[1.728,1.7929152,1.8545376,1.9128672,1.931616,1.9679712,1.9856448,2.0197824,2.0363808,2.068368,2.083824,2.098944,2.1136608,2.1280416,2.1420864,2.155728,2.1689664,2.181936,2.1945024,2.2066656,2.2184928,2.229984,2.241072,2.251824,2.26224,2.2722528,2.2818624,2.2912032,2.3001408,2.3086752,2.3168736,2.3321952,2.3393184,2.3524896,2.3585376,2.3694912,2.3743968,2.3870304,2.3964384,2.4,],[2.016,2.0530944,2.0883072,2.1216384,2.132352,2.1531264,2.1632256,2.1827328,2.1922176,2.210496,2.219328,2.227968,2.2363776,2.2445952,2.2526208,2.260416,2.2679808,2.275392,2.2825728,2.2895232,2.2962816,2.302848,2.309184,2.315328,2.32128,2.3270016,2.3324928,2.3378304,2.3429376,2.3478144,2.3524992,2.3612544,2.3653248,2.3728512,2.3763072,2.3825664,2.3853696,2.3925888,2.3979648,2.4,],[1.0,0.97102,0.94351,0.91747,0.9091,0.89287,0.88498,0.86974,0.86233,0.84805,0.84115,0.8344,0.82783,0.82141,0.81514,0.80905,0.80314,0.79735,0.79174,0.78631,0.78103,0.7759,0.77095,0.76615,0.7615,0.75703,0.75274,0.74857,0.74458,0.74077,0.73711,0.73027,0.72709,0.72121,0.71851,0.71362,0.71143,0.70579,0.70159,0.7,],[1.0,0.96619,0.934095,0.903715,0.89395,0.875015,0.86581,0.84803,0.839385,0.822725,0.814675,0.8068,0.799135,0.791645,0.78433,0.777225,0.77033,0.763575,0.75703,0.750695,0.744535,0.73855,0.732775,0.727175,0.72175,0.716535,0.71153,0.706665,0.70201,0.697565,0.693295,0.685315,0.681605,0.674745,0.671595,0.66589,0.663335,0.656755,0.651855,0.65,],[1.0,0.98068,0.96234,0.94498,0.9394,0.92858,0.92332,0.91316,0.90822,0.8987,0.8941,0.8896,0.88522,0.88094,0.87676,0.8727,0.86876,0.8649,0.86116,0.85754,0.85402,0.8506,0.8473,0.8441,0.841,0.83802,0.83516,0.83238,0.82972,0.82718,0.82474,0.82018,0.81806,0.81414,0.81234,0.80908,0.80762,0.80386,0.80106,0.8,],]
        
        results = []        
        names = sorted([*self.abilities.keys()])
        
        for name in names:
            results.append([param_calc.get_effect(self.abilities[name], ap) for ap in self.aps])
            
        len_expected = len(expected)
        self.assertEqual(len_expected, len(results))
        
        for i in range(len_expected):
            self.assertListAlmostEqual(expected[i], results[i])

if __name__ == '__main__':
    unittest.main()
